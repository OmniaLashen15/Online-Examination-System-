// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ExaminationSystem.Entities2;

namespace ExaminationSystem.Context2
{
    public partial class Online_Examination_SystemContext : DbContext
    {
        public Online_Examination_SystemContext()
        {
        }

        public Online_Examination_SystemContext(DbContextOptions<Online_Examination_SystemContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<ExamQuestion> ExamQuestions { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<StudExam> StudExams { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Online_Examination_System;Integrated Security=True ;TrustServerCertificate=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Course>(entity =>
            {
                entity.HasKey(e => e.CrsId)
                    .HasName("PK__Course__56CAA5F5B665249E");

                entity.Property(e => e.CrsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasKey(e => e.DeptId)
                    .HasName("PK__Departme__72ABC12C051612BC");

                entity.Property(e => e.DeptId).ValueGeneratedNever();

                entity.HasOne(d => d.DeptManagerNavigation)
                    .WithMany(p => p.Departments)
                    .HasForeignKey(d => d.DeptManager)
                    .HasConstraintName("Manager_constraint");

                entity.HasMany(d => d.Crs)
                    .WithMany(p => p.Depts)
                    .UsingEntity<Dictionary<string, object>>(
                        "DeptCourse",
                        l => l.HasOne<Course>().WithMany().HasForeignKey("CrsId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Dept_Crs_constraint"),
                        r => r.HasOne<Department>().WithMany().HasForeignKey("DeptId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("DeptCrs_Dept_constraint"),
                        j =>
                        {
                            j.HasKey("DeptId", "CrsId").HasName("Dept_Crs_PK");

                            j.ToTable("Dept_Course");

                            j.IndexerProperty<int>("DeptId").HasColumnName("Dept_ID");

                            j.IndexerProperty<int>("CrsId").HasColumnName("Crs_ID");
                        });

                entity.HasMany(d => d.Ins)
                    .WithMany(p => p.Depts)
                    .UsingEntity<Dictionary<string, object>>(
                        "DeptIn",
                        l => l.HasOne<Instructor>().WithMany().HasForeignKey("InsId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Dept_Ins_constraint"),
                        r => r.HasOne<Department>().WithMany().HasForeignKey("DeptId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Dept_Dept_constraint"),
                        j =>
                        {
                            j.HasKey("DeptId", "InsId").HasName("Dept_Ins_PK");

                            j.ToTable("Dept_Ins");

                            j.IndexerProperty<int>("DeptId").HasColumnName("Dept_ID");

                            j.IndexerProperty<int>("InsId").HasColumnName("Ins_ID");
                        });
            });

            modelBuilder.Entity<Exam>(entity =>
            {
                entity.HasOne(d => d.Crs)
                    .WithMany(p => p.Exams)
                    .HasForeignKey(d => d.CrsId)
                    .HasConstraintName("Exam_Crs_constraint");
            });

            modelBuilder.Entity<ExamQuestion>(entity =>
            {
                entity.HasKey(e => new { e.ExamId, e.QId })
                    .HasName("Exam_Questions_pk");

                entity.HasOne(d => d.Exam)
                    .WithMany(p => p.ExamQuestions)
                    .HasForeignKey(d => d.ExamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exam_Questions_Exam_constraint");

                entity.HasOne(d => d.QIdNavigation)
                    .WithMany(p => p.ExamQuestions)
                    .HasForeignKey(d => d.QId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exam_Questions_Question_constraint");
            });

            modelBuilder.Entity<Instructor>(entity =>
            {
                entity.HasKey(e => e.InsId)
                    .HasName("PK__Instruct__151409CD34CFA6B5");

                entity.Property(e => e.InsId).ValueGeneratedNever();

                entity.HasOne(d => d.Dept)
                    .WithMany(p => p.Instructors)
                    .HasForeignKey(d => d.DeptId)
                    .HasConstraintName("Ins_constraint");

                entity.HasMany(d => d.Crs)
                    .WithMany(p => p.Ins)
                    .UsingEntity<Dictionary<string, object>>(
                        "InsCourse",
                        l => l.HasOne<Course>().WithMany().HasForeignKey("CrsId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("InsCrs_Crs_constraint"),
                        r => r.HasOne<Instructor>().WithMany().HasForeignKey("InsId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("InsCrs_Ins_constraint"),
                        j =>
                        {
                            j.HasKey("InsId", "CrsId").HasName("Ins_Crs_PK");

                            j.ToTable("Ins_Course");

                            j.IndexerProperty<int>("InsId").HasColumnName("Ins_ID");

                            j.IndexerProperty<int>("CrsId").HasColumnName("Crs_ID");
                        });
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.HasKey(e => e.QId)
                    .HasName("PK__Question__F4FC372EF333E3BC");

                entity.Property(e => e.QId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StudExam>(entity =>
            {
                entity.HasKey(e => new { e.StId, e.ExamId })
                    .HasName("Stud_Exam_PK");

                entity.HasOne(d => d.Exam)
                    .WithMany(p => p.StudExams)
                    .HasForeignKey(d => d.ExamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("StudExam_Exam_constraint");

                entity.HasOne(d => d.St)
                    .WithMany(p => p.StudExams)
                    .HasForeignKey(d => d.StId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("StudExam_St_constraint");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.HasKey(e => e.StId)
                    .HasName("PK__Student__B9034F931A8EB17A");

                entity.Property(e => e.StId).ValueGeneratedNever();

                entity.HasOne(d => d.Dept)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.DeptId)
                    .HasConstraintName("Stud_Dept_constraint");
            });

            modelBuilder.Entity<Topic>(entity =>
            {
                entity.Property(e => e.TopicId).ValueGeneratedNever();

                entity.HasMany(d => d.Crs)
                    .WithMany(p => p.Topics)
                    .UsingEntity<Dictionary<string, object>>(
                        "CourseTopic",
                        l => l.HasOne<Course>().WithMany().HasForeignKey("CrsId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("CrsTopic_Crs_constraint"),
                        r => r.HasOne<Topic>().WithMany().HasForeignKey("TopicId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("CrsTopic_Topic_constraint"),
                        j =>
                        {
                            j.HasKey("TopicId", "CrsId").HasName("CrsTopic_PK");

                            j.ToTable("Course_Topic");

                            j.IndexerProperty<int>("TopicId").HasColumnName("Topic_ID");

                            j.IndexerProperty<int>("CrsId").HasColumnName("Crs_ID");
                        });
            });

            modelBuilder.HasSequence("QSeq")
                .HasMin(1)
                .HasMax(10);

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}